// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/photos/types/album.proto

package com.google.photos.types.proto;

/**
 *
 *
 * <pre>
 * Information about albums that are shared. This information is only included
 * if you created the album, it is shared and you have the sharing scope.
 * </pre>
 *
 * Protobuf type {@code google.photos.types.ShareInfo}
 */
public final class ShareInfo extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.photos.types.ShareInfo)
    ShareInfoOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ShareInfo.newBuilder() to construct.
  private ShareInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ShareInfo() {
    shareableUrl_ = "";
    shareToken_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ShareInfo();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.photos.types.proto.AlbumProto
        .internal_static_google_photos_types_ShareInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.photos.types.proto.AlbumProto
        .internal_static_google_photos_types_ShareInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.photos.types.proto.ShareInfo.class,
            com.google.photos.types.proto.ShareInfo.Builder.class);
  }

  public static final int SHARED_ALBUM_OPTIONS_FIELD_NUMBER = 1;
  private com.google.photos.types.proto.SharedAlbumOptions sharedAlbumOptions_;
  /**
   *
   *
   * <pre>
   * Options that control whether someone can add media items to, or comment on
   * a shared album.
   * </pre>
   *
   * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
   *
   * @return Whether the sharedAlbumOptions field is set.
   */
  @java.lang.Override
  public boolean hasSharedAlbumOptions() {
    return sharedAlbumOptions_ != null;
  }
  /**
   *
   *
   * <pre>
   * Options that control whether someone can add media items to, or comment on
   * a shared album.
   * </pre>
   *
   * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
   *
   * @return The sharedAlbumOptions.
   */
  @java.lang.Override
  public com.google.photos.types.proto.SharedAlbumOptions getSharedAlbumOptions() {
    return sharedAlbumOptions_ == null
        ? com.google.photos.types.proto.SharedAlbumOptions.getDefaultInstance()
        : sharedAlbumOptions_;
  }
  /**
   *
   *
   * <pre>
   * Options that control whether someone can add media items to, or comment on
   * a shared album.
   * </pre>
   *
   * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
   */
  @java.lang.Override
  public com.google.photos.types.proto.SharedAlbumOptionsOrBuilder
      getSharedAlbumOptionsOrBuilder() {
    return sharedAlbumOptions_ == null
        ? com.google.photos.types.proto.SharedAlbumOptions.getDefaultInstance()
        : sharedAlbumOptions_;
  }

  public static final int SHAREABLE_URL_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object shareableUrl_ = "";
  /**
   *
   *
   * <pre>
   * A link to the shared Google Photos album. Anyone with the link can view the
   * contents of the album, so it should be treated with care.
   * The `shareableUrl` parameter is only returned if the album has link sharing
   * turned on. If a user is already joined to an album that isn't link-shared,
   * they can use the album's
   * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
   * to access it instead.
   * A `shareableUrl` is invalidated if the owner turns off link sharing in the
   * Google Photos app, or if the album is unshared.
   * </pre>
   *
   * <code>string shareable_url = 2;</code>
   *
   * @return The shareableUrl.
   */
  @java.lang.Override
  public java.lang.String getShareableUrl() {
    java.lang.Object ref = shareableUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      shareableUrl_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * A link to the shared Google Photos album. Anyone with the link can view the
   * contents of the album, so it should be treated with care.
   * The `shareableUrl` parameter is only returned if the album has link sharing
   * turned on. If a user is already joined to an album that isn't link-shared,
   * they can use the album's
   * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
   * to access it instead.
   * A `shareableUrl` is invalidated if the owner turns off link sharing in the
   * Google Photos app, or if the album is unshared.
   * </pre>
   *
   * <code>string shareable_url = 2;</code>
   *
   * @return The bytes for shareableUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getShareableUrlBytes() {
    java.lang.Object ref = shareableUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      shareableUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SHARE_TOKEN_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object shareToken_ = "";
  /**
   *
   *
   * <pre>
   * A token that is used to join, leave, or retrieve the details of a shared
   * album on behalf of a user who isn't the owner.
   * A `shareToken` is invalidated if the owner turns off link sharing in the
   * Google Photos app, or if the album is unshared.
   * </pre>
   *
   * <code>string share_token = 3;</code>
   *
   * @return The shareToken.
   */
  @java.lang.Override
  public java.lang.String getShareToken() {
    java.lang.Object ref = shareToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      shareToken_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * A token that is used to join, leave, or retrieve the details of a shared
   * album on behalf of a user who isn't the owner.
   * A `shareToken` is invalidated if the owner turns off link sharing in the
   * Google Photos app, or if the album is unshared.
   * </pre>
   *
   * <code>string share_token = 3;</code>
   *
   * @return The bytes for shareToken.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getShareTokenBytes() {
    java.lang.Object ref = shareToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      shareToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IS_JOINED_FIELD_NUMBER = 4;
  private boolean isJoined_ = false;
  /**
   *
   *
   * <pre>
   * True if the user is joined to the album. This is always true for
   * the owner of the album.
   * </pre>
   *
   * <code>bool is_joined = 4;</code>
   *
   * @return The isJoined.
   */
  @java.lang.Override
  public boolean getIsJoined() {
    return isJoined_;
  }

  public static final int IS_OWNED_FIELD_NUMBER = 5;
  private boolean isOwned_ = false;
  /**
   *
   *
   * <pre>
   * True if the user owns the album.
   * </pre>
   *
   * <code>bool is_owned = 5;</code>
   *
   * @return The isOwned.
   */
  @java.lang.Override
  public boolean getIsOwned() {
    return isOwned_;
  }

  public static final int IS_JOINABLE_FIELD_NUMBER = 6;
  private boolean isJoinable_ = false;
  /**
   *
   *
   * <pre>
   * True if the album can be joined by users.
   * </pre>
   *
   * <code>bool is_joinable = 6;</code>
   *
   * @return The isJoinable.
   */
  @java.lang.Override
  public boolean getIsJoinable() {
    return isJoinable_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (sharedAlbumOptions_ != null) {
      output.writeMessage(1, getSharedAlbumOptions());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareableUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, shareableUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareToken_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, shareToken_);
    }
    if (isJoined_ != false) {
      output.writeBool(4, isJoined_);
    }
    if (isOwned_ != false) {
      output.writeBool(5, isOwned_);
    }
    if (isJoinable_ != false) {
      output.writeBool(6, isJoinable_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sharedAlbumOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, getSharedAlbumOptions());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareableUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, shareableUrl_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareToken_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, shareToken_);
    }
    if (isJoined_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(4, isJoined_);
    }
    if (isOwned_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(5, isOwned_);
    }
    if (isJoinable_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(6, isJoinable_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.photos.types.proto.ShareInfo)) {
      return super.equals(obj);
    }
    com.google.photos.types.proto.ShareInfo other = (com.google.photos.types.proto.ShareInfo) obj;

    if (hasSharedAlbumOptions() != other.hasSharedAlbumOptions()) return false;
    if (hasSharedAlbumOptions()) {
      if (!getSharedAlbumOptions().equals(other.getSharedAlbumOptions())) return false;
    }
    if (!getShareableUrl().equals(other.getShareableUrl())) return false;
    if (!getShareToken().equals(other.getShareToken())) return false;
    if (getIsJoined() != other.getIsJoined()) return false;
    if (getIsOwned() != other.getIsOwned()) return false;
    if (getIsJoinable() != other.getIsJoinable()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSharedAlbumOptions()) {
      hash = (37 * hash) + SHARED_ALBUM_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getSharedAlbumOptions().hashCode();
    }
    hash = (37 * hash) + SHAREABLE_URL_FIELD_NUMBER;
    hash = (53 * hash) + getShareableUrl().hashCode();
    hash = (37 * hash) + SHARE_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getShareToken().hashCode();
    hash = (37 * hash) + IS_JOINED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getIsJoined());
    hash = (37 * hash) + IS_OWNED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getIsOwned());
    hash = (37 * hash) + IS_JOINABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getIsJoinable());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.photos.types.proto.ShareInfo parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.photos.types.proto.ShareInfo parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.photos.types.proto.ShareInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.photos.types.proto.ShareInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Information about albums that are shared. This information is only included
   * if you created the album, it is shared and you have the sharing scope.
   * </pre>
   *
   * Protobuf type {@code google.photos.types.ShareInfo}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.photos.types.ShareInfo)
      com.google.photos.types.proto.ShareInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.photos.types.proto.AlbumProto
          .internal_static_google_photos_types_ShareInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.photos.types.proto.AlbumProto
          .internal_static_google_photos_types_ShareInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.photos.types.proto.ShareInfo.class,
              com.google.photos.types.proto.ShareInfo.Builder.class);
    }

    // Construct using com.google.photos.types.proto.ShareInfo.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sharedAlbumOptions_ = null;
      if (sharedAlbumOptionsBuilder_ != null) {
        sharedAlbumOptionsBuilder_.dispose();
        sharedAlbumOptionsBuilder_ = null;
      }
      shareableUrl_ = "";
      shareToken_ = "";
      isJoined_ = false;
      isOwned_ = false;
      isJoinable_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.photos.types.proto.AlbumProto
          .internal_static_google_photos_types_ShareInfo_descriptor;
    }

    @java.lang.Override
    public com.google.photos.types.proto.ShareInfo getDefaultInstanceForType() {
      return com.google.photos.types.proto.ShareInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.photos.types.proto.ShareInfo build() {
      com.google.photos.types.proto.ShareInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.photos.types.proto.ShareInfo buildPartial() {
      com.google.photos.types.proto.ShareInfo result =
          new com.google.photos.types.proto.ShareInfo(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.photos.types.proto.ShareInfo result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sharedAlbumOptions_ =
            sharedAlbumOptionsBuilder_ == null
                ? sharedAlbumOptions_
                : sharedAlbumOptionsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.shareableUrl_ = shareableUrl_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.shareToken_ = shareToken_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.isJoined_ = isJoined_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.isOwned_ = isOwned_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.isJoinable_ = isJoinable_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.photos.types.proto.ShareInfo) {
        return mergeFrom((com.google.photos.types.proto.ShareInfo) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.photos.types.proto.ShareInfo other) {
      if (other == com.google.photos.types.proto.ShareInfo.getDefaultInstance()) return this;
      if (other.hasSharedAlbumOptions()) {
        mergeSharedAlbumOptions(other.getSharedAlbumOptions());
      }
      if (!other.getShareableUrl().isEmpty()) {
        shareableUrl_ = other.shareableUrl_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getShareToken().isEmpty()) {
        shareToken_ = other.shareToken_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.getIsJoined() != false) {
        setIsJoined(other.getIsJoined());
      }
      if (other.getIsOwned() != false) {
        setIsOwned(other.getIsOwned());
      }
      if (other.getIsJoinable() != false) {
        setIsJoinable(other.getIsJoinable());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                input.readMessage(
                    getSharedAlbumOptionsFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                shareableUrl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                shareToken_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 32:
              {
                isJoined_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
            case 40:
              {
                isOwned_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
            case 48:
              {
                isJoinable_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private com.google.photos.types.proto.SharedAlbumOptions sharedAlbumOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.photos.types.proto.SharedAlbumOptions,
            com.google.photos.types.proto.SharedAlbumOptions.Builder,
            com.google.photos.types.proto.SharedAlbumOptionsOrBuilder>
        sharedAlbumOptionsBuilder_;
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     *
     * @return Whether the sharedAlbumOptions field is set.
     */
    public boolean hasSharedAlbumOptions() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     *
     * @return The sharedAlbumOptions.
     */
    public com.google.photos.types.proto.SharedAlbumOptions getSharedAlbumOptions() {
      if (sharedAlbumOptionsBuilder_ == null) {
        return sharedAlbumOptions_ == null
            ? com.google.photos.types.proto.SharedAlbumOptions.getDefaultInstance()
            : sharedAlbumOptions_;
      } else {
        return sharedAlbumOptionsBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public Builder setSharedAlbumOptions(com.google.photos.types.proto.SharedAlbumOptions value) {
      if (sharedAlbumOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sharedAlbumOptions_ = value;
      } else {
        sharedAlbumOptionsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public Builder setSharedAlbumOptions(
        com.google.photos.types.proto.SharedAlbumOptions.Builder builderForValue) {
      if (sharedAlbumOptionsBuilder_ == null) {
        sharedAlbumOptions_ = builderForValue.build();
      } else {
        sharedAlbumOptionsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public Builder mergeSharedAlbumOptions(com.google.photos.types.proto.SharedAlbumOptions value) {
      if (sharedAlbumOptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)
            && sharedAlbumOptions_ != null
            && sharedAlbumOptions_
                != com.google.photos.types.proto.SharedAlbumOptions.getDefaultInstance()) {
          getSharedAlbumOptionsBuilder().mergeFrom(value);
        } else {
          sharedAlbumOptions_ = value;
        }
      } else {
        sharedAlbumOptionsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public Builder clearSharedAlbumOptions() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sharedAlbumOptions_ = null;
      if (sharedAlbumOptionsBuilder_ != null) {
        sharedAlbumOptionsBuilder_.dispose();
        sharedAlbumOptionsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public com.google.photos.types.proto.SharedAlbumOptions.Builder getSharedAlbumOptionsBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getSharedAlbumOptionsFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    public com.google.photos.types.proto.SharedAlbumOptionsOrBuilder
        getSharedAlbumOptionsOrBuilder() {
      if (sharedAlbumOptionsBuilder_ != null) {
        return sharedAlbumOptionsBuilder_.getMessageOrBuilder();
      } else {
        return sharedAlbumOptions_ == null
            ? com.google.photos.types.proto.SharedAlbumOptions.getDefaultInstance()
            : sharedAlbumOptions_;
      }
    }
    /**
     *
     *
     * <pre>
     * Options that control whether someone can add media items to, or comment on
     * a shared album.
     * </pre>
     *
     * <code>.google.photos.types.SharedAlbumOptions shared_album_options = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.photos.types.proto.SharedAlbumOptions,
            com.google.photos.types.proto.SharedAlbumOptions.Builder,
            com.google.photos.types.proto.SharedAlbumOptionsOrBuilder>
        getSharedAlbumOptionsFieldBuilder() {
      if (sharedAlbumOptionsBuilder_ == null) {
        sharedAlbumOptionsBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.photos.types.proto.SharedAlbumOptions,
                com.google.photos.types.proto.SharedAlbumOptions.Builder,
                com.google.photos.types.proto.SharedAlbumOptionsOrBuilder>(
                getSharedAlbumOptions(), getParentForChildren(), isClean());
        sharedAlbumOptions_ = null;
      }
      return sharedAlbumOptionsBuilder_;
    }

    private java.lang.Object shareableUrl_ = "";
    /**
     *
     *
     * <pre>
     * A link to the shared Google Photos album. Anyone with the link can view the
     * contents of the album, so it should be treated with care.
     * The `shareableUrl` parameter is only returned if the album has link sharing
     * turned on. If a user is already joined to an album that isn't link-shared,
     * they can use the album's
     * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
     * to access it instead.
     * A `shareableUrl` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string shareable_url = 2;</code>
     *
     * @return The shareableUrl.
     */
    public java.lang.String getShareableUrl() {
      java.lang.Object ref = shareableUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shareableUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * A link to the shared Google Photos album. Anyone with the link can view the
     * contents of the album, so it should be treated with care.
     * The `shareableUrl` parameter is only returned if the album has link sharing
     * turned on. If a user is already joined to an album that isn't link-shared,
     * they can use the album's
     * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
     * to access it instead.
     * A `shareableUrl` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string shareable_url = 2;</code>
     *
     * @return The bytes for shareableUrl.
     */
    public com.google.protobuf.ByteString getShareableUrlBytes() {
      java.lang.Object ref = shareableUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        shareableUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * A link to the shared Google Photos album. Anyone with the link can view the
     * contents of the album, so it should be treated with care.
     * The `shareableUrl` parameter is only returned if the album has link sharing
     * turned on. If a user is already joined to an album that isn't link-shared,
     * they can use the album's
     * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
     * to access it instead.
     * A `shareableUrl` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string shareable_url = 2;</code>
     *
     * @param value The shareableUrl to set.
     * @return This builder for chaining.
     */
    public Builder setShareableUrl(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      shareableUrl_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A link to the shared Google Photos album. Anyone with the link can view the
     * contents of the album, so it should be treated with care.
     * The `shareableUrl` parameter is only returned if the album has link sharing
     * turned on. If a user is already joined to an album that isn't link-shared,
     * they can use the album's
     * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
     * to access it instead.
     * A `shareableUrl` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string shareable_url = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearShareableUrl() {
      shareableUrl_ = getDefaultInstance().getShareableUrl();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A link to the shared Google Photos album. Anyone with the link can view the
     * contents of the album, so it should be treated with care.
     * The `shareableUrl` parameter is only returned if the album has link sharing
     * turned on. If a user is already joined to an album that isn't link-shared,
     * they can use the album's
     * [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album)
     * to access it instead.
     * A `shareableUrl` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string shareable_url = 2;</code>
     *
     * @param value The bytes for shareableUrl to set.
     * @return This builder for chaining.
     */
    public Builder setShareableUrlBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      shareableUrl_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object shareToken_ = "";
    /**
     *
     *
     * <pre>
     * A token that is used to join, leave, or retrieve the details of a shared
     * album on behalf of a user who isn't the owner.
     * A `shareToken` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string share_token = 3;</code>
     *
     * @return The shareToken.
     */
    public java.lang.String getShareToken() {
      java.lang.Object ref = shareToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shareToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * A token that is used to join, leave, or retrieve the details of a shared
     * album on behalf of a user who isn't the owner.
     * A `shareToken` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string share_token = 3;</code>
     *
     * @return The bytes for shareToken.
     */
    public com.google.protobuf.ByteString getShareTokenBytes() {
      java.lang.Object ref = shareToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        shareToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * A token that is used to join, leave, or retrieve the details of a shared
     * album on behalf of a user who isn't the owner.
     * A `shareToken` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string share_token = 3;</code>
     *
     * @param value The shareToken to set.
     * @return This builder for chaining.
     */
    public Builder setShareToken(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      shareToken_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A token that is used to join, leave, or retrieve the details of a shared
     * album on behalf of a user who isn't the owner.
     * A `shareToken` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string share_token = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearShareToken() {
      shareToken_ = getDefaultInstance().getShareToken();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * A token that is used to join, leave, or retrieve the details of a shared
     * album on behalf of a user who isn't the owner.
     * A `shareToken` is invalidated if the owner turns off link sharing in the
     * Google Photos app, or if the album is unshared.
     * </pre>
     *
     * <code>string share_token = 3;</code>
     *
     * @param value The bytes for shareToken to set.
     * @return This builder for chaining.
     */
    public Builder setShareTokenBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      shareToken_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private boolean isJoined_;
    /**
     *
     *
     * <pre>
     * True if the user is joined to the album. This is always true for
     * the owner of the album.
     * </pre>
     *
     * <code>bool is_joined = 4;</code>
     *
     * @return The isJoined.
     */
    @java.lang.Override
    public boolean getIsJoined() {
      return isJoined_;
    }
    /**
     *
     *
     * <pre>
     * True if the user is joined to the album. This is always true for
     * the owner of the album.
     * </pre>
     *
     * <code>bool is_joined = 4;</code>
     *
     * @param value The isJoined to set.
     * @return This builder for chaining.
     */
    public Builder setIsJoined(boolean value) {

      isJoined_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * True if the user is joined to the album. This is always true for
     * the owner of the album.
     * </pre>
     *
     * <code>bool is_joined = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIsJoined() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isJoined_ = false;
      onChanged();
      return this;
    }

    private boolean isOwned_;
    /**
     *
     *
     * <pre>
     * True if the user owns the album.
     * </pre>
     *
     * <code>bool is_owned = 5;</code>
     *
     * @return The isOwned.
     */
    @java.lang.Override
    public boolean getIsOwned() {
      return isOwned_;
    }
    /**
     *
     *
     * <pre>
     * True if the user owns the album.
     * </pre>
     *
     * <code>bool is_owned = 5;</code>
     *
     * @param value The isOwned to set.
     * @return This builder for chaining.
     */
    public Builder setIsOwned(boolean value) {

      isOwned_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * True if the user owns the album.
     * </pre>
     *
     * <code>bool is_owned = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIsOwned() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isOwned_ = false;
      onChanged();
      return this;
    }

    private boolean isJoinable_;
    /**
     *
     *
     * <pre>
     * True if the album can be joined by users.
     * </pre>
     *
     * <code>bool is_joinable = 6;</code>
     *
     * @return The isJoinable.
     */
    @java.lang.Override
    public boolean getIsJoinable() {
      return isJoinable_;
    }
    /**
     *
     *
     * <pre>
     * True if the album can be joined by users.
     * </pre>
     *
     * <code>bool is_joinable = 6;</code>
     *
     * @param value The isJoinable to set.
     * @return This builder for chaining.
     */
    public Builder setIsJoinable(boolean value) {

      isJoinable_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * True if the album can be joined by users.
     * </pre>
     *
     * <code>bool is_joinable = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIsJoinable() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isJoinable_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.photos.types.ShareInfo)
  }

  // @@protoc_insertion_point(class_scope:google.photos.types.ShareInfo)
  private static final com.google.photos.types.proto.ShareInfo DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.photos.types.proto.ShareInfo();
  }

  public static com.google.photos.types.proto.ShareInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ShareInfo> PARSER =
      new com.google.protobuf.AbstractParser<ShareInfo>() {
        @java.lang.Override
        public ShareInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<ShareInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ShareInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.photos.types.proto.ShareInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
